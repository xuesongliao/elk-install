# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
broker.id=39

delete.topic.enable=true

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from 
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
listeners=PLAINTEXT://172.17.37.207:9092

# Hostname and port the broker will advertise to producers and consumers. If not set, 
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=PLAINTEXT://101.200.44.238:9092

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
# 处理网络请求的最大线程数
num.network.threads=5

# The number of threads that the server uses for processing requests, which may include disk I/O
# 处理磁盘I/O的线程数
num.io.threads=8

# 一些后台线程数
background.threads = 4

# 等待IO线程处理的请求队列最大数
queued.max.requests = 500

# The send buffer (SO_SNDBUF) used by the socket server
# socket的发送缓冲区(SO_SNDBUF)
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
# socket的接收缓冲区 (SO_RCVBUF) 
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
# socket请求的最大字节数。为了防止内存溢出，message.max.bytes必然要小于
socket.request.max.bytes=104857600

############################# Topic #############################
# 是否允许自动创建topic ，若是false，就需要通过命令创建topic
#auto.create.topics.enable =true
# 一个topic ，默认分区的replication个数 ，不能大于集群中broker的个数。
#default.replication.factor =1
# 消息体的最大大小，单位是字节
#message.max.bytes = 1000000

############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
#日志存放目录，多个目录使用逗号分割
log.dirs=/data/kafka/kafka-logs

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
# 每个topic的分区个数，更多的partition会产生更多的segment file
num.partitions=1

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

# 对于segment日志的索引文件大小限制
#log.index.size.max.bytes = 10 * 1024 * 1024
# 索引计算的一个缓冲区，一般不需要设置。
#log.index.interval.bytes = 4096

############################# replica #############################
## partition management controller 与replicas之间通讯的超时时间
#controller.socket.timeout.ms = 30000
## controller-to-broker-channels消息队列的尺寸大小
#controller.message.queue.size=10
## replicas响应leader的最长等待时间，若是超过这个时间，就将replicas排除在管理之外
#replica.lag.time.max.ms = 10000
## 是否允许控制器关闭broker ,若是设置为true,会关闭所有在这个broker上的leader，并转移到其他broker
#controlled.shutdown.enable = false
## 控制器关闭的尝试次数
#controlled.shutdown.max.retries = 3
## 每次关闭尝试的时间间隔
#controlled.shutdown.retry.backoff.ms = 5000
# 
## 如果relicas落后太多,将会认为此partition relicas已经失效。而一般情况下,因为网络延迟等原因,总会导致replicas中消息同步滞后。如果消息严重滞后,leader将认为此relicas网络延迟较大或者消息吞吐能力有限。在broker数量较少,或者网络不足的环境中,建议提高此值.
#replica.lag.max.messages = 4000
##leader与relicas的socket超时时间
#replica.socket.timeout.ms= 30 * 1000
## leader复制的socket缓存大小
#replica.socket.receive.buffer.bytes=64 * 1024
## replicas每次获取数据的最大字节数
#replica.fetch.max.bytes = 1024 * 1024
## replicas同leader之间通信的最大等待时间，失败了会重试
#replica.fetch.wait.max.ms = 500
## 每一个fetch操作的最小数据尺寸,如果leader中尚未同步的数据不足此值,将会等待直到数据达到这个大小
#replica.fetch.min.bytes =1
## leader中进行复制的线程数，增大这个数值会增加relipca的IO
#num.replica.fetchers = 1
## 每个replica将最高水位进行flush的时间间隔
#replica.high.watermark.checkpoint.interval.ms = 5000
#  
# # 是否自动平衡broker之间的分配策略
# auto.leader.rebalance.enable = false
# # leader的不平衡比例，若是超过这个数值，会对分区进行重新的平衡
# leader.imbalance.per.broker.percentage = 10
# # 检查leader是否不平衡的时间间隔
# leader.imbalance.check.interval.seconds = 300
# # 客户端保留offset信息的最大空间大小
# offset.metadata.max.bytes = 1024

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
# 当达到下面的消息数量时，会将数据flush到日志文件中。默认10000
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
# 当达到下面的时间(ms)时，执行一次强制的flush操作。interval.ms和interval.messages无论哪个达到，都会flush。默认3000ms
#log.flush.interval.ms=1000

# 检查是否需要将日志flush的时间间隔
#log.flush.scheduler.interval.ms = 3000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.
# 日志清理策略 (delete|compact)
log.cleanup.policy=delete

# The minimum age of a log file to be eligible for deletion due to age
# 日志保存时间 (hours|minutes)，默认为7天(168小时) 超过这个时间会根据policy处理数据 bytes和minutes无论哪个先达到都会触发
log.retention.hours=2

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
# 日志数据存储的最大字节数 超过这个时间会根据policy处理数据
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
# 控制日志segment文件的大小, 超出该大小则追加到一个新的日志segment文件中 (-1表示没有限制)
log.segment.bytes=1073741824

# 当达到下面时间，会强制新建一个segment
log.roll.hours = 168

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
# 日志片段文件的检查周期，查看它们是否达到了删除策略的设置 (log.retention.hours或log.retention.bytes)
log.retention.check.interval.ms=300000

# 当这个属性设置为false时，一旦日志的保存时间或者大小达到上限时，就会被删除；如果设置为true，则当保存属性达到上限时，就会进行log compaction
log.cleaner.enable=false

# 对于压缩的日志保留的最长时间: 也是客户端消费消息的最长时间
# log.retention.minutes的区别在于控制未压缩数据
log.cleaner.delete.retention.ms=14400000


############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
# Zookeeper quorum设置。如果有多个使用逗号分割
zookeeper.connect=172.17.37.207:2181

# Timeout in ms for connecting to zookeeper
# 连接zk的超时时间
zookeeper.connection.timeout.ms=6000

# ZooKeeper集群中leader和follower之间的同步实际
zookeeper.sync.time.ms = 2000


############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms=0
